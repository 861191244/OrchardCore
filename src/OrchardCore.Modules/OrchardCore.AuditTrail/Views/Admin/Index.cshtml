@model AuditTrailListViewModel
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<ViewContext> S;

@{
    @* var orderByItems = new List<SelectListItem>
    {
        new SelectListItem
        {
            Text = S["Timestamp"],
            Value = AuditTrailOrderBy.DateDescending.ToString(),
            Selected = Model.OrderBy == AuditTrailOrderBy.DateDescending
        },
        new SelectListItem
        {
            Text = S["Category"],
            Value = AuditTrailOrderBy.CategoryAscending.ToString(),
            Selected = Model.OrderBy == AuditTrailOrderBy.CategoryAscending
        },
        new SelectListItem
        {
            Text = S["Event"],
            Value = AuditTrailOrderBy.EventAscending.ToString(),
            Selected = Model.OrderBy == AuditTrailOrderBy.EventAscending},
    }; *@
}


<zone name="Title"><h1 class="mb-4">@RenderTitleSegments(T["Audit Trail"])</h1></zone>

<form asp-action="Index" method="post">
    @await DisplayAsync(Model)
</form>
@* 
<form asp-action="Index" method="get">
    <div class="form-row mb-4">
        @await DisplayAsync(Model.FiltersShape)
        <div class="d-flex">
            <div class="form-group">
                <label class="form-control border-0 pl-1 pr-2" asp-for="OrderBy">@T["Sort by"]</label>
            </div>
            <div class="form-group mr-2">
                <select class="form-control" asp-for="OrderBy" asp-items="orderByItems"></select>
            </div>
            <div class="form-group">
                <button class="btn btn-primary" type="submit">@T["Apply"]</button>
            </div>
        </div>
    </div>
</form>

@if (!Model.Items.Any())
{
    <div class="alert alert-primary" role="alert">@T["There are no records to display."]</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover table-striped table-bordered">
            <thead>
                <tr>
                    <th scope="col"></th>
                    <th scope="col">@T["Category"]</th>
                    <th scope="col">@T["Event"]</th>
                    <th scope="col">@T["User"]</th>
                    <th scope="col" class="text-nowrap">@T["Client IP"]</th>
                    <th scope="col">@T["Timestamp"]</th>
                    <th scope="col" style="width: 20%">@T["Summary"]</th>
                    <th scope="col" style="width: 20%">@T["Comment"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Items)
                {
                    <tr>
                        <td>@await DisplayAsync(item.ActionsShape) here</td>

                        <td>@item.LocalizedCategory</td>
                        <td>@item.LocalizedName</td>
                        <td>@item.Event.UserName</td>
                        <td>@item.Event.ClientIpAddress</td>
                        <td>@await DisplayAsync(await New.DateTime(Utc: item.Event.CreatedUtc, Format: "g"))</td>
                        <td>@await DisplayAsync(item.EventShape)</td>
                        <td>@Html.Raw(item.Event.Comment)</td>
                    </tr>
                    <tr>
                        @{
                            var dy = (dynamic)item.Shape;
                        }
                        <td>@await DisplayAsync(item.Shape)</td>
                        @Orchard.ConsoleLog(item.Shape)
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@await DisplayAsync(Model.PagerShape) *@
